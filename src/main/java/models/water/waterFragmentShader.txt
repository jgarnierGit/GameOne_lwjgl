#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;

void main(void) {

	vec3 unitNormal = normalize(vec3(0,-1,0)); //water normal resuming it to its simplest form
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec2 ndc = (clipSpace.xy/clipSpace.w) / 2.0 + 0.5;// converting in screen coordinates
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);
	
	//vec2 distortion1 = texture(dudvMap, vec2(textureCoords.x, textureCoords.y)).rg * 2.0 -1.0;
	//refractTexCoords += distortion1;
	//reflectTexCoords += distortion1;
	
	float nDot1 = dot(unitVectorToCamera,unitNormal) / dot(unitNormal,unitNormal);
	
	vec4 reflectColour = texture(reflectionTexture,reflectTexCoords);
	reflectColour.w = nDot1;
	vec4 refractColour = texture(refractionTexture,refractTexCoords);
	refractColour.w = 1.0 -nDot1;
	out_Color = mix(reflectColour,refractColour,0.5);
	//out_Color = mix(vec4(0.0, 0.0, 1.0, 0.8), reflectColour, 0.5);

}