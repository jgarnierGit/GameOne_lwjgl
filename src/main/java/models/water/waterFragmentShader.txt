#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;

uniform float moveFactor;


const float waveStrength = 0.04;
const float shineDamper = 20.0;
const float reflectivity = 0.5;

void main(void) {

	vec3 unitNormal = normalize(vec3(0.0,1.0,0.0)); //water normal resuming it to its simplest form
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec2 ndc = (clipSpace.xy/clipSpace.w) / 2.0 + 0.5;// converting in screen coordinates
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);
	
	float near  = 0.1; //TODO load from masterRenderer
	float far = 1000.0;
	float depth = texture(depthMap, refractTexCoords).r; //Tuto 8 opengl water thinMatrix
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	float waterDepth = floorDistance - waterDistance;
	
	
	// changin coordinates system oring + applyin water transformation
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 finalDistorsion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/20.0, 0.0, 1.0);
	
	refractTexCoords += finalDistorsion;
	refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);// avoid glitch at screen limit
	reflectTexCoords += finalDistorsion;
	reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999); // avoid glitch at screen limit
	reflectTexCoords.y = clamp(reflectTexCoords.y,-0.999, -0.001);// avoid glitch at screen limit
	
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b * 3.0, normalMapColour.g * 2.0 -1.0);
	normal = normalize(normal);
	
	float fresnelDelta = dot(unitVectorToCamera,normal);
	fresnelDelta = pow(fresnelDelta, 10.0); // change reflectivness
	

	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, unitVectorToCamera), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth/20.0, 0.0, 1.0);
	
	vec4 reflectColour = texture(reflectionTexture,reflectTexCoords);
	vec4 refractColour = texture(refractionTexture,refractTexCoords);
	vec4 waterColor = mix(reflectColour,refractColour,fresnelDelta);
	out_Color = mix(vec4(0.0, 0.0, 1.0, 0.8), waterColor, 0.95) + vec4(specularHighlights, 0.0);
	out_Color.a = clamp(waterDepth/5.0, 0.0, 1.0);
}